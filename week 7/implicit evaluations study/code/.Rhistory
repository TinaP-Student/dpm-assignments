# self report measure
data_selfreport_raw <- read_csv("../../implicit evaluations study/data/raw/data_selfreport_raw.csv") |>janitor::clean_names()
data_selfreport_scored_exclusions <- data_selfreport_scored|>
mutate(exclude_participant = case_when(is.na(positive) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(like) ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
TRUE ~ "include"))
# self report measure
data_selfreport_raw <- read_csv("../../implicit evaluations study/data/raw/data_selfreport_raw.csv") |>janitor::clean_names()
()
# self report measure
data_selfreport_raw <- read_csv("../../../implicit evaluations study/data/raw/data_selfreport_raw.csv") |>janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../implicit evaluations study/data/raw/data_selfreport_raw.csv") |>janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../../implicit evaluations study/data/raw/data_selfreport_raw.csv") |>janitor::clean_names()
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
library(kableExtra)
# self report measure
data_selfreport_raw <- read_csv("../../implicit evaluations study/data/raw/data_selfreport_raw.csv") |>janitor::clean_names()
data_selfreport_scored_exclusions <- data_selfreport_scored|>
mutate(exclude_participant = case_when(is.na(positive) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(like) ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
TRUE ~ "include"))
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_selfreport_scored_exclusions <- data_selfreport_scored|>
mutate(exclude_participant = case_when(is.na(positive) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(like) ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
TRUE ~ "include"))
#for me to look at the stuff
#data_selfreport_scored|>
#  count(like)
#  count(prefer) <- hat ein NA
#    count(positive) <- hat ein NA
#    count(mean_evaluation)
#  count(subject) |>
#  mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include"))|>  # --> no duplicates
#  kable() |>
#  kable_classic(full_width = FALSE)
View(data_selfreport_scored_exclusions)
write_csv(data_selfreport_scored_exclusions, ".../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
write_csv(data_selfreport_scored_exclusions, ".../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
write_csv(data_selfreport_scored_exclusions, "../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
write_csv(ata_selfreport_exclusions, "../../implicit evaluations study/data/week7/ata_selfreport_exclusions.csv")
write_csv(data_selfreport_exclusions, "../../implicit evaluations study/data/week7/data_selfreport_exclusions.csv")
#preparation - need this for the full_join!
#practically the same as before, only I have selected 3 column
data_selfreport_scored_to_combine <- data_selfreport_scored|>
mutate(ex_clude_participant = case_when(is.na(positive) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(like) ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
TRUE ~ "include"))|>
select(subject, mean_evaluation, ex_clude_participant)
#Preparation
data_selfreport_raw_exclusions <- data_selfreport_raw|>
filter(trialcode %in% c("like", "prefer", "positive"),
response != "Ctrl+'B'")|>
rename(item = trialcode) |>
mutate(response = as.numeric(response))
data_selfreport_exclusions <- full_join(data_selfreport_raw_exclusions,
data_selfreport_scored_to_combine
,  by = "subject")|>
mutate(exclude_participant = case_when(is.na(response) ~ "exclude", #actually not necassary lol
ex_clude_participant == "exclude" ~ "exclude",
TRUE ~ "include"))|>
select(-ex_clude_participant)
#all Participants have tree responses, except the one
table(data_selfreport_exclusions$subject)|>
kable() |>
kable_classic(full_width = FALSE)
write_csv(data_selfreport_exclusions, "../../implicit evaluations study/data/week7/data_selfreport_exclusions.csv")
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv(".../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
data_selfreport_exclusions <- read_csv(".../../implicit evaluations study/data/week7/data_selfreport_exclusions.csv")
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv(".../.../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv(".../.../.../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv(".../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
data_selfreport_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_exclusions.csv")
View(data_selfreport_exclusions)
View(data_selfreport_scored_exclusions)
View(data_selfreport_exclusions)
# affect attribution procedure
data_amp_raw <- read_csv("../../implicit evaluations study/data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#Instead of a full_join with data_amp_raw and data_amp_performance_criteria, I made a new dataset
data_amp_before_exclude <- data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE),
proportion_fast_trials_amp = mean(latency_prob, .by = subject),
exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"), .by = subject)
#the count of how many Trials are necessary
participant_frequencies <- table(data_amp_before_exclude$subject)
#excluded also the duplicate!
data_amp_after_exclude <- data_amp_before_exclude|>
mutate(participant_frequencies = participant_frequencies[as.character(subject)],
exclude_participant = case_when(exclude_amp_performance == "exclude" ~ "exclude",
participant_frequencies < 72  ~ "exclude",
participant_frequencies > 72  ~ "exclude",
TRUE ~ "include"))
#count trials without practice
table(data_amp_before_exclude$subject)  |>
kable() |>
kable_classic(full_width = FALSE)
#count trial with practice
#table(data_amp_raw$subject)  |>
#  kable() |>
#  kable_classic(full_width = FALSE)
#a diffrent attempt to count, but practicly the same
#data_amp_before_exclude|>
#  count(subject)|>
#  kable() |>
#  kable_classic(full_width = FALSE)
#just looking on numbers :) 2_73
#data_amp_after_exclude|>
#  count(blocknum_and_trialnum)
# ... an attempt, but not relly a smart attempt
#data_amp_before_exclude |>
#  select(subject, blocknum_and_trialnum) |>
#  pivot_wider(names_from = blocknum_and_trialnum,
#              values_from = subject)  |>
#    kable() |>
#  kable_classic(full_width = FALSE)
write.csv(data_amp_after_exclude,"../../implicit evaluations study/data/week7/data_amp_after_exclude.csv")
data_amp_after_exclude <- read_csv("../../implicit evaluations study/data/week7/data_amp_after_exclude.csv")
View(data_amp_after_exclude)
# affect attribution procedure
data_amp_raw <- read_csv("../../implicit evaluations study/data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
View(data_amp_performance_criteria)
View(data_amp_raw)
View(data_amp_after_exclude)
# affect attribution procedure
data_amp_raw <- read_csv("../../implicit evaluations study/data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#Instead of a full_join with data_amp_raw and data_amp_performance_criteria, I made a new dataset
#I could have excluded more columns, but wasn't sure if we could still use them later, so some "selects" are with #.
data_amp_before_exclude <- data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE),
proportion_fast_trials_amp = mean(latency_prob, .by = subject),
exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"), .by = subject) |>
select(-blockcode, -1) #-primestim, -targetstim
View(data_amp_before_exclude)
View(data_amp_raw)
#Instead of a full_join with data_amp_raw and data_amp_performance_criteria, I made a new dataset
#I could have excluded more columns, but wasn't sure if we could still use them later, so some "selects" are with #.
data_amp_before_exclude <- data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE),
proportion_fast_trials_amp = mean(latency_prob, .by = subject),
exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"), .by = subject) |>
select(-blockcode) #-primestim, -targetstim
#the count of how many Trials are necessary
participant_frequencies <- table(data_amp_before_exclude$subject)
#excluded also the duplicate!
data_amp_after_exclude <- data_amp_before_exclude|>
mutate(participant_frequencies = participant_frequencies[as.character(subject)],
exclude_participant = case_when(exclude_amp_performance == "exclude" ~ "exclude",
participant_frequencies < 72  ~ "exclude",
participant_frequencies > 72  ~ "exclude",
TRUE ~ "include"))
View(data_amp_after_exclude)
data_amp_after_exclude <- read_csv("../../implicit evaluations study/data/week7/data_amp_after_exclude.csv")
View(data_amp_after_exclude)
# affect attribution procedure
data_amp_raw <- read_csv("../../implicit evaluations study/data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#Instead of a full_join with data_amp_raw and data_amp_performance_criteria, I made a new dataset
#I could have excluded more columns, but wasn't sure if we could still use them later, so some "selects" are with #.
data_amp_before_exclude <- data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE),
proportion_fast_trials_amp = mean(latency_prob, .by = subject),
exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"), .by = subject) |>
select(-blockcode) #-primestim, -targetstim
#the count of how many Trials are necessary
participant_frequencies <- table(data_amp_before_exclude$subject)
#excluded also the duplicate!
data_amp_after_exclude <- data_amp_before_exclude|>
mutate(participant_frequencies = participant_frequencies[as.character(subject)],
exclude_participant = case_when(exclude_amp_performance == "exclude" ~ "exclude",
participant_frequencies < 72  ~ "exclude",
participant_frequencies > 72  ~ "exclude",
TRUE ~ "include"))
#count trials without practice
table(data_amp_before_exclude$subject)  |>
kable() |>
kable_classic(full_width = FALSE)
write.csv(data_amp_after_exclude,"../../implicit evaluations study/data/week7/data_amp_after_exclude.csv")
data_amp_after_exclude <- read_csv("../../implicit evaluations study/data/week7/data_amp_after_exclude.csv")
View(data_amp_after_exclude)
data_amp_after_exclude <- read_csv("../../implicit evaluations study/data/week7/data_amp_after_exclude.csv") |>
select(-1)
View(data_amp_after_exclude)
View(data_amp_after_exclude)
# affect attribution procedure
data_amp_raw <- read_csv("../../implicit evaluations study/data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
#Instead of a full_join with data_amp_raw and data_amp_performance_criteria, I made a new dataset
#I could have excluded more columns, but wasn't sure if we could still use them later, so some "selects" are with #.
data_amp_before_exclude <- data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE),
proportion_fast_trials_amp = mean(latency_prob, .by = subject),
exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"), .by = subject) |>
select(-blockcode) #-primestim, -targetstim
#the count of how many Trials are necessary
participant_count <- table(data_amp_before_exclude$subject)
#excluded also the duplicate!
data_amp_after_exclude <- data_amp_before_exclude|>
mutate(participant_count = participant_count[as.character(subject)],
exclude_participant = case_when(exclude_amp_performance == "exclude" ~ "exclude",
participant_count < 72  ~ "exclude",
participant_count > 72  ~ "exclude",
TRUE ~ "include"))
View(data_amp_after_exclude)
write.csv(data_amp_after_exclude,"../../implicit evaluations study/data/week7/data_amp_after_exclude.csv")
data_amp_after_exclude <- read_csv("../../implicit evaluations study/data/week7/data_amp_after_exclude.csv") |>
select(-1)
View(data_amp_after_exclude)
data_selfreport_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_exclusions.csv")
View(data_selfreport_exclusions)
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
View(data_selfreport_scored_exclusions)
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
library(kableExtra)
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
data_selfreport_scored_exclusions <- data_selfreport_scored|>
mutate(exclude_participant = case_when(is.na(positive) ~ "exclude",
is.na(prefer) ~ "exclude",
is.na(like) ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
TRUE ~ "include"))
#I don't know if that will make the process easier for you, but you can also read in the finished datasets otherwise
data_selfreport_scored_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_scored_exclusions.csv")
data_selfreport_exclusions <- read_csv("../../implicit evaluations study/data/week7/data_selfreport_exclusions.csv")
data_amp_after_exclude <- read_csv("../../implicit evaluations study/data/week7/data_amp_after_exclude.csv") |>
select(-1)
View(data_amp_after_exclude)
View(data_selfreport_exclusions)
View(data_selfreport_scored_exclusions)
