## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "alright", TRUE ~ "fail"))
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"))
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"),
amp_score = sum(primecongruent==1)/72,
score_above_one = case_when(amp_score > 1 ~ "fail",TRUE ~ "noFail"),
score_under_zero = case_when(amp_score < 0 ~ "fail", TRUE ~ "noFail")))
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"),
amp_score = sum(primecongruent==1)/72,
score_above_one = case_when(amp_score > 1 ~ "fail",TRUE ~ "noFail"),
score_under_zero = case_when(amp_score < 0 ~ "fail", TRUE ~ "noFail"))
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"),
amp_score = sum(primecongruent==1)/72)
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject, primecongruent)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"),
amp_score = sum(primecongruent==1)/72)
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode, subject, primecongruent)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"))
#Sanitychecks
## Wenn die Trials mehr oder weniger als 36 Versuche haben,dann stimmt etwas nicht
## man könnte auch die SUbjects counten und schauen, wie viele Versuche sie insgesamt hatten, aber mit dem anderen Vorgehen kann man gleichzeitig kontrollieren, ob die Positiven/Negativen Primes stimmen
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"))
## die Amp_scores können nicht grösser als 1 oder kleiner als 0 sein, sonst stimmt etwas nicht
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score_above_one",
amp_score < 0 ~ "score_under_zero",
TRUE ~ "good")
score_above_one = case_when(amp_score > 1 ~ "fail",TRUE ~ "noFail"),
## die Amp_scores können nicht grösser als 1 oder kleiner als 0 sein, sonst stimmt etwas nicht
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score_above_one",
amp_score < 0 ~ "score_under_zero",
TRUE ~ "good")
score_above_one = case_when(amp_score > 1 ~ "fail",TRUE ~ "noFail"),
## die Amp_scores können nicht grösser als 1 oder kleiner als 0 sein, sonst stimmt etwas nicht
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score_above_one",
amp_score < 0 ~ "score_under_zero",
TRUE ~ "good"))
View(sanity_check_2)
## die Amp_scores können nicht grösser als 1 oder kleiner als 0 sein, sonst stimmt etwas nicht
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score_above_one",
amp_score < 0 ~ "score_under_zero",
TRUE ~ "good aka between 0 and 1"))
## die Amp_scores können nicht grösser als 1 oder kleiner als 0 sein, sonst stimmt etwas nicht
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice", trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score above one",
amp_score < 0 ~ "score under zero",
TRUE ~ "good"))
View(sanity_check_2)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
#evaluation == 0 ~ negative evaluation
#evaluation == 1 ~ positive evaluation
data_amp_score<-data_amp_raw|>
filter(blockcode != "practice",
trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject) |>
summarise(amp_score = sum(primecongruent==1)/72)
#Sanitychecks
## If the trials have more or less than 36 attempts, then something is wrong
## you could also count the subjects and see how many trials they had in total, but with the other procedure you can check at the same time whether the positive/negative primes are correct
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice",
trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"))
## the amp_scores cannot be greater than 1 or less than 0, otherwise something is wrong
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice",
trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score above one",
amp_score < 0 ~ "score under zero",
TRUE ~ "good"))
#wenn BlockCode dabei, andere Resultate? abchekken?
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject") |>
full_join(data_amp_completeness, by = "subject")|>
full_join(data_amp_score, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual dupicate cases and determine which of the mulitiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_amp_completeness == "exclude" ~ "exclude",
TRUE ~ "include"))
View(data_processed)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
# overall mean amp_scores
data_mean_amp_scores <- data_processed_after_exclusions |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE)) |>
mutate(group = "Full sample")
# mean amp_scores by gender category
data_amp_scores_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
# combine
bind_rows(data_mean_amp_scores, data_amp_scores_gender) |>
select(subset = group, Mean, SD) |>
mutate(subset = stringr::str_to_sentence(subset)) |>
mutate_if(is.numeric, round_half_up, digits = 4) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Scores" = 2)) |>
kable_classic(full_width = FALSE)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
# overall mean amp_scores
data_mean_amp_scores <- data_processed_after_exclusions |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE)) |>
mutate(group = "Full sample")
# mean amp_scores by gender category
data_amp_scores_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
# combine
bind_rows(data_mean_amp_scores, data_amp_scores_gender) |>
select(subset = group, Mean, SD) |>
mutate(subset = stringr::str_to_sentence(subset)) |>
mutate_if(is.numeric, round_half_up, digits = 4) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Scores" = 2)) |>
kable_classic(full_width = FALSE)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
#evaluation == 0 ~ negative evaluation
#evaluation == 1 ~ positive evaluation
data_amp_score<-data_amp_raw|>
filter(blockcode != "practice",
trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject) |>
summarise(amp_score = sum(primecongruent==1)/72)
#Sanitychecks
## If the trials have more or less than 36 attempts, then something is wrong
## you could also count the subjects and see how many trials they had in total, but with the other procedure you can check at the same time whether the positive/negative primes are correct
sanity_check_1 <-data_amp_raw|>
filter(blockcode != "practice",
trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
count(trialcode)|>
rename(PrimeTrials = n)|>
mutate(correct_count_Trials = case_when(PrimeTrials == 36 ~ "yes", TRUE ~ "no"))
## the amp_scores cannot be greater than 1 or less than 0, otherwise something is wrong
sanity_check_2 <-data_amp_raw|>
filter(blockcode != "practice",
trialcode != "instructions")|>
select(subject, evaluation=correct, trialcode)|>
mutate(primecongruent= case_when(trialcode == "prime_negative"&evaluation==0~ 1,
trialcode == "prime_positive"&evaluation==1~ 1,
TRUE~0))|>
group_by(subject)|>
summarise(amp_score = sum(primecongruent==1)/72,
sanity_check = case_when(amp_score > 1 ~ "score above one",
amp_score < 0 ~ "score under zero",
TRUE ~ "good"))
#wenn BlockCode dabei, andere Resultate? abchekken?
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject") |>
full_join(data_amp_completeness, by = "subject")|>
full_join(data_amp_score, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual dupicate cases and determine which of the mulitiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_amp_completeness == "exclude" ~ "exclude",
TRUE ~ "include"))
View(data_processed)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
# overall mean amp_scores
data_mean_amp_scores <- data_processed_after_exclusions |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE)) |>
mutate(group = "Full sample")
# mean amp_scores by gender category
data_amp_scores_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
# combine
bind_rows(data_mean_amp_scores, data_amp_scores_gender) |>
select(subset = group, Mean, SD) |>
mutate(subset = stringr::str_to_sentence(subset)) |>
mutate_if(is.numeric, round_half_up, digits = 4) |>
kable() |>
add_header_above(header = c(" " = 1, "AMP Scores" = 2)) |>
kable_classic(full_width = FALSE)
