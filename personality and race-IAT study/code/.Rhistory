# exists already
dir.create("../data/processed/", recursive = TRUE)
write_csv(data_processed, "../data/processed/data_processed.csv")
data_processed <- read_csv("../data/processed/data_processed.csv")
if(!file.exists("../data/processed/data_processed_codebook.xlsx")){
codebook_template <- data.frame(variable = colnames(data_processed)) |>
mutate(explanation = NA)
write.xlsx(codebook_template, file = "../data/processed/data_processed_codebook.xlsx")
}
sessionInfo()
data_raw_bfi_adjusted <- data_raw_bfi |>
rename(ID = unique_id) |>
mutate_at(vars(all_of(r_agreeableness, r_openness, r_neuroticism, r_conscientiousness, r_extroversion)), list(~ case_when(
. == 6 ~ 1,
. == 5 ~ 2,
. == 4 ~ 3,
. == 3 ~ 4,
. == 2 ~ 5,
. == 1 ~ 6)))
#reverse the specifications with case_when
data_raw_bfi_adjusted <- data_raw_bfi |>
rename(ID = unique_id) |>
mutate_at(vars(r_agreeableness, r_openness, r_neuroticism, r_conscientiousness, r_extroversion), list(~ case_when(
. == 6 ~ 1,
. == 5 ~ 2,
. == 4 ~ 3,
. == 3 ~ 4,
. == 2 ~ 5,
. == 1 ~ 6)))
# only goes up to 1-6, but the 0, 7 and NA will be dealt with later
# have created lists of which items need to be reversed to keep it clearer
# agreeableness 1, 3, 6, and 8, and
r_agreeableness <- c("bfi_a1", "bfi_a3", "bfi_a6", "bfi_a8")
# openness items 7 and 9.
r_openness <- c("bfi_o7", "bfi_o9")
# neuroticism items 2, 5, and 7,
r_neuroticism <- c("bfi_n2", "bfi_n5", "bfi_n7")
# conscientiousness items 2, 4 5 and 9,
r_conscientiousness <- c("bfi_c2", "bfi_c4","bfi_c5", "bfi_c9")
# extroversion scale items 2, 5 and 7,
r_extroversion <- c("bfi_e2", "bfi_e5", "bfi_e7")
#reverse the specifications with case_when
data_raw_bfi_adjusted <- data_raw_bfi |>
rename(ID = unique_id) |>
mutate_at(vars(r_agreeableness, r_openness, r_neuroticism, r_conscientiousness, r_extroversion), list(~ case_when(
. == 6 ~ 1,
. == 5 ~ 2,
. == 4 ~ 3,
. == 3 ~ 4,
. == 2 ~ 5,
. == 1 ~ 6)))
View(cor_agreeableness)
mean_agree <- data_processed_after_exclusions|>
select(mean_agreeableness, D)|>
na.omit()
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(readr)
library(dplyr)
library(janitor)
library(scales)
library(patchwork)
library(ggplot2)
library(patchwork)
library(psych)
library(report)
#I do it at the beginning and for reproducibility
set.seed(333)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Sample before exclusions" = 1)) |>
kable_classic(full_width = FALSE)
#much less now
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Sample after exclusions" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
filter(age != "missing")|>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE))|>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
#all persons including the missings - interestingly, there is no difference!
# data_processed_after_exclusions |>
#   mutate(age = as.numeric(age)) |>
#   summarise(Mean = mean(age, na.rm = TRUE),
#             SD = sd(age, na.rm = TRUE)) |>
#   mutate_all(.funs = janitor::round_half_up, digits = 1) |>
#   kable() |>
#   add_header_above(header = c("Age" = 2)) |>
#   kable_classic(full_width = FALSE)
#
data_processed_after_exclusions |>
filter(gender != "missing")|>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |>
kable() |>
kable_classic(full_width = FALSE)
#including the missings - it makes a difference here!
#I left this code visible because 13,7% missing data
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |>
kable() |>
kable_classic(full_width = FALSE)
alpha_agreeableness <- data_processed_after_exclusions |>
select(starts_with("bfi_a")) |>
na.omit() |>
alpha()
alpha_openness <- data_processed_after_exclusions |>
select(starts_with("bfi_o")) |>
na.omit() |>
alpha()
alpha_extroversion <- data_processed_after_exclusions |>
select(starts_with("bfi_e")) |>
na.omit() |>
alpha()
alpha_neuroticism <- data_processed_after_exclusions |>
select(starts_with("bfi_n")) |>
na.omit() |>
alpha()
alpha_conscientiousness <- data_processed_after_exclusions |>
select(starts_with("bfi_c")) |>
na.omit() |>
alpha()
ggplot(data_processed_after_exclusions, aes(x = D)) +
geom_histogram(binwidth = 0.1,
boundary = 1,
color = "#000000",
fill = "#446644",
alpha = 0.75) +
labs(x = "D Score",
y = "Frequency",
title = "Distribution of D Score") +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(-2, 2)) +
scale_y_continuous(breaks = pretty_breaks(n = 4), limits = c(0, 23)) +
theme_minimal() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10))
mean_agree <- data_processed_after_exclusions|>
select(mean_agreeableness, D)|>
na.omit()
ggplot(mean_agree, aes(x = mean_agreeableness)) +
geom_histogram(binwidth = 0.2,
boundary = 1,
color = "#000000",
fill = "#AF5FAF",
alpha = 0.75) +
labs(x = "Mean Agreeableness",
y = "Frequency",
title = "Distribution of Agreeableness") +
theme_minimal() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1,6)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(0, 17))
mean_open <- data_processed_after_exclusions|>
select(mean_openness, D)|>
na.omit()
ggplot(mean_open, aes(x = mean_openness)) +
geom_histogram(binwidth = 0.2,
boundary = 1,
color = "#000000",
fill = "#FF7F00",
alpha = 0.75) +
labs(x = "Mean Openness",
y = "Frequency",
title = "Distribution of Openness") +
theme_minimal() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1,6)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(0, 17))
mean_extro <- data_processed_after_exclusions|>
select(mean_extroversion, D)|>
na.omit()
ggplot(mean_extro, aes(x = mean_extroversion)) +
geom_histogram(binwidth = 0.2,
boundary = 1,
color = "#000000",
fill = "#E41A1C",
alpha = 0.75) +
labs(x = "Mean Extroversion",
y = "Frequency",
title = "Distribution of Extroversion") +
theme_minimal() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1,6)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(0, 17))
mean_neuro <- data_processed_after_exclusions|>
select(mean_neuroticism, D)|>
na.omit()
ggplot(mean_neuro, aes(x = mean_neuroticism)) +
geom_histogram(binwidth = 0.2,
boundary = 1,
color = "#000000",
fill = "#87CEEB",
alpha = 0.75) +
labs(x = "Mean Neuroticism",
y = "Frequency",
title = "Distribution of Neuroticism") +
theme_minimal() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1,6)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(0, 17))
mean_cons <- data_processed_after_exclusions|>
select(mean_conscientiousness, D)|>
na.omit()
ggplot(mean_cons, aes(x = mean_conscientiousness)) +
geom_histogram(binwidth = 0.2,
boundary = 1,
color = "#000000",
fill = "#27d08b",
alpha = 0.75) +
labs(x = "Mean Conscientiousness",
y = "Frequency",
title = "Distribution of Conscientiousness") +
theme_minimal() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1,6)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(0, 17))
# meanscores_correlations
data_processed_after_exclusions |>
select(D, starts_with(c("mean_"))) |>
cor(method = "pearson", use = "pairwise.complete.obs")|> #only takes values for the correlation if they exist in pairs
round(2)|>
kable() |>
kable_classic(full_width = FALSE)|>
add_header_above(header = c("Correlation between BFI Scales and IAT" = 7),  align = "left")
# items_correlations - I also wanted to do it out of interest
# data_processed_after_exclusions |>
#   select(D, starts_with(c("bfi_"))) |>
#   cor(use = "pairwise.complete.obs")|>
#   round(2)|>
#   kable() |>
#   kable_classic(full_width = FALSE)|>
#   add_header_above(header = c("Correlation between BFI Items and IAT" = 46),  align = "c")
#preparing the dataset for the t tests
data_t_test<- data_processed_after_exclusions|>
filter(gender %in% c("female", "male"))
t_test_D <- t.test(D ~ gender, data = data_t_test)
report_table(t_test_D)
report(t_test_D)
#report and report_text do the same thing in our case here
# t_test_mean1 <- t.test(mean1 ~ gender, data = data_t_test)
# report_table(t_test_mean1)
# report_text(t_test_mean1)
#
# t_test_mean2 <- t.test(mean2 ~ gender, data = data_t_test)
# report_table(t_test_mean2)
# report_text(t_test_mean2)
# for Agreeableness
regression_agreeableness_D <- lm(D ~ mean_agreeableness, data = data_processed_after_exclusions)
report(regression_agreeableness_D)
summary(regression_agreeableness_D)
# regression_agreeableness_mean1 <- lm(mean1 ~ mean_agreeableness, data = data_processed_after_exclusions)
# regression_agreeableness_mean2 <- lm(mean2 ~ mean_agreeableness, data = data_processed_after_exclusions)
#
#
# report(regression_agreeableness_mean1)
# summary(regression_agreeableness_mean1)
#
# report(regression_agreeableness_mean2)
# summary(regression_agreeableness_mean2)
# for Openness
regression_openness_D <- lm(D ~ mean_openness, data = data_processed_after_exclusions)
report(regression_openness_D)
summary(regression_openness_D)
# regression_openness_mean1 <- lm(mean1 ~ mean_openness, data = data_processed_after_exclusions)
# regression_openness_mean2 <- lm(mean2 ~ mean_openness, data = data_processed_after_exclusions)
#
# report(regression_openness_mean1)
# summary(regression_openness_mean1)
#
# report(regression_openness_mean2)
# summary(regression_openness_mean2)
# for Extroversion
regression_extroversion_D <- lm(D ~ mean_extroversion, data = data_processed_after_exclusions)
report(regression_extroversion_D)
summary(regression_extroversion_D)
# regression_extroversion_mean1 <- lm(mean1 ~ mean_extroversion, data = data_processed_after_exclusions)
# regression_extroversion_mean2 <- lm(mean2 ~ mean_extroversion, data = data_processed_after_exclusions)
#
# report(regression_extroversion_mean1)
# summary(regression_extroversion_mean1)
#
# report(regression_extroversion_mean2)
# summary(regression_extroversion_mean2)
# for Neuroticism
regression_neuroticism_D <- lm(D ~ mean_neuroticism, data = data_processed_after_exclusions)
report(regression_neuroticism_D)
summary(regression_neuroticism_D)
# regression_neuroticism_mean1 <- lm(mean1 ~ mean_neuroticism, data = data_processed_after_exclusions)
# regression_neuroticism_mean2 <- lm(mean2 ~ mean_neuroticism, data = data_processed_after_exclusions)
#
# report(regression_neuroticism_mean1)
# summary(regression_neuroticism_mean1)
#
# report(regression_neuroticism_mean2)
# summary(regression_neuroticism_mean2)
# for Conscientiousness
regression_conscientiousness_D <- lm(D ~ mean_conscientiousness, data = data_processed_after_exclusions)
report(regression_conscientiousness_D)
summary(regression_conscientiousness_D)
# regression_conscientiousness_mean1 <- lm(mean1 ~ mean_conscientiousness, data = data_processed_after_exclusions)
# regression_conscientiousness_mean2 <- lm(mean2 ~ mean_conscientiousness, data = data_processed_after_exclusions)
#
# report(regression_conscientiousness_mean1)
# summary(regression_conscientiousness_mean1)
#
# report(regression_conscientiousness_mean2)
# summary(regression_conscientiousness_mean2)
# for Agreeableness
mean_agree$extreme <- ifelse(mean_agree$D >= quantile(mean_agree$D, 0.9) |
mean_agree$D <= quantile(mean_agree$D, 0.1),
"extreme", "not extreme")
plot_agree <- ggplot(mean_agree, aes(x = mean_agreeableness, y = D)) +
geom_point(size = 1.5, alpha = 0.7, aes(fill = extreme, shape = extreme)) +
geom_jitter(alpha = 0.2, aes(fill = extreme, shape = extreme)) +
scale_shape_manual(values = c("not extreme" = 16, "extreme" = 24),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
scale_fill_manual(values = c("not extreme" = "#000000", "extreme" = "#fb75fb"),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
geom_smooth(method = "lm", color = "#f915f9", se = TRUE) +
labs(x = "Mean Agreeableness",
y = "D Score",
title = "Scatter Plot of Agreeableness Predicting the D score") +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1, 6.2)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(-2, 2)) +
expand_limits(x = c(1, 6), y = c(-1, 1)) +
coord_cartesian(expand = FALSE) +
theme_classic() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
print(plot_agree)
# for Openness
mean_open$extreme <- ifelse(mean_open$D >= quantile(mean_open$D, 0.9) |
mean_open$D <= quantile(mean_open$D, 0.1),
"extreme", "not extreme")
plot_open <- ggplot(mean_open, aes(x = mean_openness, y = D)) +
geom_point(size = 1.5, alpha = 0.7, aes(fill = extreme, shape = extreme)) +
geom_jitter(alpha = 0.2, aes(fill = extreme, shape = extreme)) +
scale_shape_manual(values = c("not extreme" = 16, "extreme" = 24),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
scale_fill_manual(values = c("not extreme" = "#000000", "extreme" = "#FFBF00"),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
geom_smooth(method = "lm", color = "#FF5733", se = TRUE) +
labs(x = "Mean Openness",
y = "D Score",
title = "Scatter Plot of Openness Predicting the D score") +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1, 6.2)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(-2, 2)) +
expand_limits(x = c(1, 6), y = c(-1, 1)) +
coord_cartesian(expand = FALSE) +
theme_classic() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10))
print(plot_open)
# for Extroversion
mean_extro$extreme <- ifelse(mean_extro$D >= quantile(mean_extro$D, 0.9) |
mean_extro$D <= quantile(mean_extro$D, 0.1),
"extreme", "not extreme")
plot_extro <- ggplot(mean_extro, aes(x = mean_extroversion, y = D)) +
geom_point(size = 1.5, alpha = 0.7, aes(fill = extreme, shape = extreme)) +
geom_jitter(alpha = 0.2, aes(fill = extreme, shape = extreme)) +
scale_shape_manual(values = c("not extreme" = 16, "extreme" = 24),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
scale_fill_manual(values = c("not extreme" = "#000000", "extreme" = "#ed5e5f"),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
geom_smooth(method = "lm", color = "#f80609", se = TRUE) +
labs(x = "Mean Extroversion",
y = "D Score",
title = "Scatter Plot of Extroversion Predicting the D score") +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1, 6.2)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(-2, 2)) +
expand_limits(x = c(1, 6), y = c(-1, 1)) +
coord_cartesian(expand = FALSE) +
theme_classic() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10))
print(plot_extro)
# for Neuroticism
mean_neuro$extreme <- ifelse(mean_neuro$D >= quantile(mean_neuro$D, 0.9) |
mean_neuro$D <= quantile(mean_neuro$D, 0.1),
"extreme", "not extreme")
plot_neuro <- ggplot(mean_neuro, aes(x = mean_neuroticism, y = D)) +
geom_point(size = 1.5, alpha = 0.7, aes(fill = extreme, shape = extreme)) +
geom_jitter(alpha = 0.2, aes(fill = extreme, shape = extreme)) +
scale_shape_manual(values = c("not extreme" = 16, "extreme" = 24),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
scale_fill_manual(values = c("not extreme" = "#000000", "extreme" = "#87CEEB"),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
geom_smooth(method = "lm", color = "#1a1ce4", se = TRUE) +
labs(x = "Mean Neuroticism",
y = "D Score",
title = "Scatter Plot of Neuroticism Predicting the D score") +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1, 6.2)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(-2, 2)) +
expand_limits(x = c(1, 6), y = c(-1, 1)) +
coord_cartesian(expand = FALSE) +
theme_classic() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10))
print(plot_neuro)
# for Conscientiousness
mean_cons$extreme <- ifelse(mean_cons$D >= quantile(mean_cons$D, 0.9) |
mean_cons$D <= quantile(mean_cons$D, 0.1),
"extreme", "not extreme")
plot_cons <- ggplot(mean_cons, aes(x = mean_conscientiousness, y = D)) +
geom_point(size = 1.5, alpha = 0.7, aes(fill = extreme, shape = extreme)) +
geom_jitter(alpha = 0.2, aes(fill = extreme, shape = extreme)) +
scale_shape_manual(values = c("not extreme" = 16, "extreme" = 24),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
scale_fill_manual(values = c("not extreme" = "#000000", "extreme" = "#27d08b"),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme")) +
geom_smooth(method = "lm", color = "#00757b", se = TRUE) +
labs(x = "Mean Conscientiousness",
y = "D Score",
title = "Scatter Plot of Conscientiousness Predicting the D score") +
scale_x_continuous(breaks = pretty_breaks(n = 6), limits = c(1, 6.2)) +
scale_y_continuous(breaks = pretty_breaks(n = 6),  limits = c(-2, 2)) +
expand_limits(x = c(1, 6), y = c(-1, 1)) +
coord_cartesian(expand = FALSE) +
theme_classic() +
theme(title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10))
print(plot_cons)
#I chose this layout because I like it
#and wanted to experiment with it
layout <- "
A#B
#C#
D#E
"
#seperate guide, so that the same guide does not appear five times in different colors
plot_guide <- ggplot(mean_cons, aes(x = mean_conscientiousness, y = D)) +
geom_point(size = 1.5, alpha = 0.7, aes(shape = extreme)) +
scale_shape_manual(values = c("not extreme" = 16, "extreme" = 24),
name = "Extreme D Score",
labels = c("Top or Bottom 10%", "Not Extreme"))
#Place Z in the layout does not exist,
#so the plot that I only created because of the guide will be dropped
#-> the legend is kept
plot_temp <- wrap_plots(A = plot_agree + labs(title = "Agreeableness") + theme(legend.position = "none"),
B = plot_open + labs(title = "Openness") + theme(legend.position = "none"),
C = plot_extro + labs(title = "Extroversion") + theme(legend.position = "none"),
D = plot_neuro + labs(title = "Neuroticism") + theme(legend.position = "none"),
E = plot_cons + labs(title = "Conscientiousness") + theme(legend.position = "none"),
Z = plot_guide,
design = layout) +
theme_classic()
plot_comb_bfi <- plot_temp + plot_layout(guides = 'collect', design = layout) &
theme(axis.title = element_text(face = "plain"),
legend.title = element_text(face = "bold"),
plot.title = element_text(face = "bold"))  &
plot_annotation(title = "Scatter Plots with Regressions for BFI Subscales Predicting the D Score",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
#its not pretty, but if you open the png or pdf, it's in a much butter resolution
#the one warning can be ignored, it refers to the plot_guide, this was on purpose
print(plot_comb_bfi)
ggsave("../communications/plot_comb_bfi.png", plot = plot_comb_bfi,  width = 18, height = 12, dpi = 300, device = "png")
ggsave("../communications/plot_comb_bfi.pdf", plot = plot_comb_bfi,width = 18, height = 12, device = "pdf")
sessionInfo()
